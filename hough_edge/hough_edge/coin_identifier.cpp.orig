#include <opencv2/opencv.hpp>
#include <math.h>
#define PI (3.141592653589793)

#include <iostream>
#include <sstream>

#include "shift.hpp"
#include "coin_identifier.h"
#include "file_handler.h"
#include "ssim.h"

using namespace std;

void CoinIdentifier::preprocess(cv::Mat image, cv::Mat &output_image) {
	//Initialize temporary variables
	double min, max;

	image.copyTo(output_image);
	
	//Get Luminosity channel
	cv::vector<cv::Mat> channels;
	cv::cvtColor(output_image, output_image, CV_BGR2HLS);
	cv::split(output_image, channels);
	channels[1].copyTo(output_image);


	//if(image.channels() > 1) {
	//	//Convert to grayscale
	//	cv::cvtColor(output_image, output_image, CV_RGB2GRAY);
	//}

	cv::Mat blurred;

	//Histogram equalization image to highlight edges
	cv::minMaxIdx(output_image, &min, &max);
	cv::equalizeHist(output_image, output_image);

	cv::GaussianBlur(output_image, blurred, cv::Size(5,5), 2, 2);
	cv::subtract(blurred, output_image, output_image);
	
	//cv::multiply(0.5, blurred, blurred);
	//cv::add(blurred, output_image, output_image);
	
	if(debug) {
		cvNamedWindow("Preprocessed");
		cv::imshow("Preprocessed", output_image);
		cv::waitKey(0);
		cvDestroyAllWindows();
	}
}

void CoinIdentifier::unwrap_coin(cv::Mat image, cv::Mat &output_image) {
	cv::Vec2f center(image.cols/2, image.rows/2);

	//Calculate output image dimensions

	//Width would be equal to circumference of the image
	int width = 2*PI*center[0];
	int height = center[0];

	cv::Mat temp(height, width, image.type());

	for (int x = 0; x < width; x++) {
		double theta = (x / (double) width) * 2 * PI;

		for (int y = 0; y < height; y++) {
			double r = (double) y;
			float ix = ( r * cos(theta) ) + center[0];
			float iy = ( r * sin(theta) ) + center[1];

			if (temp.channels() != 1) {
				cv::Vec3b src, dst;
				src = image.at<cv::Vec3b>(iy, ix);
				
				cv::Point2f p(ix, iy);
				src = CoinIdentifier::interpolate(p, image);
				
				for (int i = 0; i < temp.channels(); i++) {
					dst[i] = src[i];
				}

				temp.at<cv::Vec3b>(y, x) = dst;
			}
			else if(temp.channels() == 1) {
				temp.at<uchar>(y, x) = image.at<uchar>(iy, ix);
			}
		}
	}

	temp.copyTo(output_image);

	if(debug) {
		cvNamedWindow("Unwrapped");
		cv::imshow("Unwrapped", output_image);
		cv::waitKey(0);
		cvDestroyAllWindows();
	}
}

void CoinIdentifier::convert_to_mask(cv::Mat image, cv::Mat &output){
	if(image.channels() != 1)
		cv::cvtColor(image, image, CV_BGR2GRAY);

	image.convertTo(image, CV_32F, 1/255.0);
	image.copyTo(output);
}

cv::Vec3b CoinIdentifier::interpolate(cv::Point2f pt, cv::Mat image) {
	cv::Mat patch;
	cv::getRectSubPix(image, cv::Size(1, 1), pt, patch);
	return patch.at<cv::Vec3b>(0,0);
}

//Public functions
CoinIdentifier::CoinIdentifier(int ndebug, int ndivisions) {
	debug = ndebug;
	divisions = ndivisions;
}

void CoinIdentifier::identify_coins(cv::vector<cv::Mat> coins) {
	hyp_list.clear();

	for(int i = 0; i < coins.size(); i++) {
		int coin_hypothesis = identify(coins[i]);
		
		if(coin_hypothesis == -1)
			coin_hypothesis = 0;
		
		hyp_list.push_back(coin_hypothesis);


		if(debug) {
			cvNamedWindow("coin");
			cvNamedWindow("match");
			std::string loc_coins = "training_data";

			cv::Mat template_image = load_coin_from_template( coin_hypothesis, loc_coins );
		
			cv::imshow("coin", coins[i]);
			cv::imshow("match", template_image);
			cv::waitKey(0);
			cv::destroyAllWindows();
		}
	}
}

int CoinIdentifier::identify(cv::Mat image) {
	//Extracting features from current coin contender image
	CoinIdentifier::unwrap_coin(image, image);
	CoinIdentifier::preprocess(image, image);
	
	convert_to_mask(image, image);
		
	std::string folder_name = "features";

	int best_match = -1;
	int best_offset;
	double best_score;

	cv::Mat best_matched_template;
	cv::Mat best_offset_image;

	cv::Scalar gray_val_im = get_gray_values(image, divisions);
		
	int match_counter = 0;

	//Matching coin contender with templates
	for (int i = 0; i < filelist.size(); i++) {
		cv::Mat template_image = load_coin_from_template( i, folder_name );

		cv::Mat new_image;
		cv::resize(image, new_image, template_image.size());

		convert_to_mask(template_image, template_image);

		cv::Scalar gray_val_template = get_gray_values(template_image, divisions);
			
		cv::Scalar out_gray;
		cv::subtract(gray_val_im, gray_val_template, out_gray);
		out_gray = abs_scalar(out_gray);

		cv::Scalar out_gray_cum = sum(out_gray);

		double local_best;
		int local_best_offset;
		cv::Mat local_offset_image;
			
		//If the gray value lines match
		if (out_gray_cum[0] < 0.2){
			match_counter++;

			for (int j = 0; j < new_image.cols; j++) {
				offset_x(new_image, new_image, j);

				////Using subtraction
				cv::Mat overlap;
				cv::subtract(template_image, new_image, overlap);
				//cv::multiply(template_image, new_image, overlap);

				//Make score from [0-1] least to most similar so it is interchangable with SSIM
				cv::Scalar s = sum(sum(overlap));
				s[0] = 1 - abs( s[0] / (new_image.cols * new_image.rows));

				////Using SSIM
				//cv::Scalar s = getMSSIM(new_image, template_image);
				
				if(j==0 || abs(s[0]) > local_best) {
					local_best = abs(s[0]);
					local_best_offset = j;
					new_image.copyTo(local_offset_image);
				}
			}

			if(debug){
				cout << "Gray Value Similarity: " << out_gray_cum[0] << endl;
				cout << "Local best score: " << local_best << endl
					<< "File name: " << filelist[i] << endl
					<< "Offset: " << local_best_offset << endl << endl;

				cvNamedWindow("candidate");
				cvNamedWindow("template");

				cv::imshow("candidate", local_offset_image);
				cv::imshow("template", template_image);
				cv::waitKey(0);
				cv::destroyAllWindows();
			}

			if(i==0 || local_best > best_score) {
					best_score = local_best;
					best_offset = local_best_offset;
					local_offset_image.copyTo(best_offset_image);

					best_match = i;
					template_image.copyTo(best_matched_template);
			}
		}
	}

	if(match_counter == 0) {
		cout << "No matches found for coin!" << endl;
		return -1;
	}

	if(debug){
		cout << endl << "Best template match for image: " << filelist[best_match] << endl
		<< "Best match score: " << best_score << endl
		<< "Best match offset: " << best_offset << endl << endl;
	
		cvNamedWindow("candidate");
		cvNamedWindow("template");

		cv::imshow("candidate", best_offset_image);
		cv::imshow("template", best_matched_template);
		cv::waitKey(0);
		cv::destroyAllWindows();
	}

<<<<<<< HEAD
	return best_match;
=======
		cout << best_match << "\t" << best_score << endl;
		return 1;
>>>>>>> origin/coinDetector
}

void CoinIdentifier::train() {
	cout << "Extracting features from training data." << endl;

	//File and folder names
	std::string training_folder_name = "training_data";
	std::string output_folder_name = "features";

	//Fetch list of files from the training folder
	FileHandler fh;
	filelist = fh.list_files(training_folder_name);

	if( filelist.size() == 0 ) {
		cout << "Error: Training files could not be found!" << endl;
		exit(-2);
	}
	
	//Generate features from training data
	for (int i = 0; i < filelist.size(); i++) {	
		if(debug)
			cout << filelist[i] << endl;

		cv::Mat image = load_coin_from_template( i, training_folder_name );
		cv::Mat temp;

		CoinIdentifier::unwrap_coin(image, temp);
		CoinIdentifier::preprocess(temp, temp);
		
		std::string features_name = get_qualified_name(output_folder_name, filelist[i]);
		cv::imwrite(features_name, temp);
	}

	cout << "Generating features complete." << endl;
}

std::string CoinIdentifier::get_qualified_name(std::string folder_name, std::string file_name) {
	ostringstream ost;
	ost << folder_name << "/" << file_name;
	
	return ost.str();
}

void CoinIdentifier::offset_x(cv::Mat image, cv::Mat &output, int offset) {
	shift(image, output, cv::Point2f(offset, 0),  cv::BORDER_WRAP);
}

cv::Scalar CoinIdentifier::get_gray_values(cv::Mat image, int levels) {
	cv::Scalar out;

	int height = image.rows;
	int inc = height/(double)levels;

	cv::Mat temp;
	for (int i = 0; i < levels; i++) {
		temp = image(cv::Rect(0, i*inc, image.cols, inc));
		cv::Scalar s = sum(sum(temp))/(image.cols*image.rows);
		out[i] = s[0]*100;
	}

	return out;
}

cv::Scalar CoinIdentifier::abs_scalar(cv::Scalar m) {
	cv::Scalar out;

	for(int i = 0; i < m.cols; i++) {
		out[i] = abs(m[i]);
	}

	return out;
}

cv::Mat CoinIdentifier::load_coin_from_template( int n, std::string folder_name) {
		std::string name = get_qualified_name(folder_name, filelist[n]);
		cv::Mat image = cv::imread( name );
		return image;
}

void CoinIdentifier::draw_coins(cv::Mat image, cv::Mat &output, cv::vector<cv::Vec3f> coin_positions, cv::Vector<int> hyp_list) {
	image.copyTo(output);

	for ( int i = 0; i < coin_positions.size(); i++) {
		int x = coin_positions[i][0];
		int y = coin_positions[i][1];
		int radius = coin_positions[i][2];

		cv::circle(output, cv::Point(x, y), radius, cv::Scalar(0, 255, 0), 3);

		ostringstream ss;
		ss << get_coin_val(hyp_list[i]);
		string n = ss.str();

		cv::Point text_pos(coin_positions[i][0] - 33,coin_positions[i][1] + 40);

		cv::putText(output, n, text_pos + cv::Point(1, - 1), CV_FONT_HERSHEY_SCRIPT_SIMPLEX, 1, cv::Scalar(0, 0, 0), 2);
		cv::putText(output, n, text_pos, CV_FONT_HERSHEY_SCRIPT_SIMPLEX, 1, cv::Scalar(0, 255, 0), 2);

		ss.str("");
	}
}

//Returns classification of coins in image
cv::vector<int> CoinIdentifier::getCoinClass() {
	return hyp_list;
}

//Returns coin currency based of template file number
double CoinIdentifier::get_coin_val(int n) {
	/*
		Files are named in the following format:

		X_XX_X_X.jpg

		where X are numbers.

		The first number group represents the euro value of the coin [0, 1 or 2]
		The second number group represents the cent value of the coin [00, 01, 02, 05, 10, 20, 50]
		The third number group represents which side of the coin the image is of (tails or heads) [0 or 1]
		The fourth number group represents the serial number of the particular coin image in order to keep the file names from clashing [0 to 9]
	*/

	string name = filelist[n];

	int euro = stoi(name.substr(0, 1));
	int cent = stoi(name.substr(2, 2));

	cout << filelist[n] << endl;
	cout << name.substr(0, 1) << " euros and " << name.substr(2, 2) << " cents." << endl;
	return euro + cent/(double)100;
}