#include <iostream>
#include <sstream>
#include <opencv2\opencv.hpp>

//Import headers
#include "coin_detector.h"
#include "coin_identifier.h"
#include "image_stream.h"

using namespace std;

#define DEBUG 0

int main() {
	//Initializing objects

	cv::Mat frame, temp_frame, temp_coin;
	//cv::Mat fgMaskMOG; //fg mask generated by MOG method
	//cv::Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
	
	
<<<<<<< HEAD
	//File and folder names
	string filename = "test_data/image_993.jpg";
	//string filename = "Data_set2/image_9.jpg";
	string folder_name = "training_data";
	string output_folder = "unwrapped";
	string isolated_output_folder = "isolated_images";
=======
	//Initializing ImageStream class
	//this handles images saved on file as an input stream
	ImageStream cap("test_data", "test_", ".jpg", 200);
	////Or alternately open webcam
	//cv::VideoCapture cap(0);
>>>>>>> 00d0ab83fccddebf4db15c8bed5522c0f0c01843

	//TODO: I'm putting this to 1.0f for now Dev you need to fix the circle localization
	//so we can put the extra region back
	CoinDetector cd(DEBUG, 1.0f);
	CoinIdentifier ci(DEBUG);

	ci.train();

	////Loading resources
	cap >> frame;

	if(frame.empty()) {
		cout << "Error: Could not find file " << cap.get_qualified_name() << endl;
		return -1;
	}
	
	//Detecting coins in image
	cd.detect(frame, temp_frame);
	cv::vector<cv::Mat> coins = cd.getCoins();
<<<<<<< HEAD
	cout << "Detected " << coins.size() << " coins." << endl;
	for (int i = 0; i < coins.size(); i++){
		ostringstream ost;
		ost << isolated_output_folder << "/isolated_image" << i+1 <<".png";
		string isolated_coin_name = ost.str();
		cv::imwrite(isolated_coin_name, coins[i]);
	}
	for (int i = 0; i < filelist.size(); i++){	
		
		ostringstream ost;
		ost << folder_name << "/" << filelist[i];
		string qualified_coin_name = ost.str();

		ost.str("");

		ost << output_folder << "/" << filelist[i];
		string qualified_output_name = ost.str();
		
		cout << qualified_coin_name << endl
			<< qualified_output_name << endl;

		cv::Mat test_coin = cv::imread(qualified_coin_name);

		//CoinIdentifier ci;
		//ci.identify(test_coin, temp_coin);

		//cv::imwrite(qualified_output_name, temp_coin);
	}
=======
	cout << "Detected " << coins.size() << " coin candidates." << endl;
	
	//Identifying coins in image
	ci.identify_coins(coins, frame, temp_frame);
>>>>>>> 00d0ab83fccddebf4db15c8bed5522c0f0c01843

	return 0;
}

cv::Mat fetchFrame() {
}